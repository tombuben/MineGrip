#pragma kernel CSMain

// SECTION generated code from the unity gradient noise node
// https://docs.unity3d.com/Packages/com.unity.shadergraph@10.2/manual/Gradient-Noise-Node.html
float2 unity_gradientNoise_dir(float2 p)
{
    p = p % 289;
    float x = (34 * p.x + 1) * p.x % 289 + p.y;
    x = (34 * x + 1) * x % 289;
    x = frac(x / 41) * 2 - 1;
    return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
}

float unity_gradientNoise(float2 p)
{
    float2 ip = floor(p);
    float2 fp = frac(p);
    float d00 = dot(unity_gradientNoise_dir(ip), fp);
    float d01 = dot(unity_gradientNoise_dir(ip + float2(0, 1)), fp - float2(0, 1));
    float d10 = dot(unity_gradientNoise_dir(ip + float2(1, 0)), fp - float2(1, 0));
    float d11 = dot(unity_gradientNoise_dir(ip + float2(1, 1)), fp - float2(1, 1));
    fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
    return lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x);
}

void Unity_GradientNoise_float(float2 UV, float Scale, out float Out)
{
    Out = unity_gradientNoise(UV * Scale) + 0.5;
}
// END SECTION

RWStructuredBuffer<int> voxel_buffer;
int3 buffer_size;

int get_buffer_pos(int x, int y, int z)
{
    return x * buffer_size.y * buffer_size.z + y * buffer_size.z + z;
}


int3 world_position;

[numthreads(8,1,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float noise_value;
    Unity_GradientNoise_float(id.xz + world_position.xz * buffer_size.xz, 0.1, noise_value);

    for (int y = 0; y < buffer_size.y; y++)
    {
        y += world_position.y * buffer_size.y;
        voxel_buffer[get_buffer_pos(id.x, y, id.z)] = (float)y/(float)buffer_size.y < noise_value;
    }
}
