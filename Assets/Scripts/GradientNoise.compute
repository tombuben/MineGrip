#pragma kernel CSMain

// SECTION generated code from the unity gradient noise node
// https://docs.unity3d.com/Packages/com.unity.shadergraph@10.2/manual/Gradient-Noise-Node.html
float2 unity_gradientNoise_dir(float2 p)
{
    p = p % 289;
    float x = (34 * p.x + 1) * p.x % 289 + p.y;
    x = (34 * x + 1) * x % 289;
    x = frac(x / 41) * 2 - 1;
    return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
}

float unity_gradientNoise(float2 p)
{
    float2 ip = floor(p);
    float2 fp = frac(p);
    float d00 = dot(unity_gradientNoise_dir(ip), fp);
    float d01 = dot(unity_gradientNoise_dir(ip + float2(0, 1)), fp - float2(0, 1));
    float d10 = dot(unity_gradientNoise_dir(ip + float2(1, 0)), fp - float2(1, 0));
    float d11 = dot(unity_gradientNoise_dir(ip + float2(1, 1)), fp - float2(1, 1));
    fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
    return lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x);
}

void Unity_GradientNoise_float(float2 UV, float Scale, out float Out)
{
    Out = unity_gradientNoise(UV * Scale) + 0.5;
}
// END SECTION

RWStructuredBuffer<int> voxel_buffer;
int3 buffer_size;

int get_buffer_pos(int x, int y, int z)
{
    return x * buffer_size.y * buffer_size.z + y * buffer_size.z + z;
}


int3 world_position;

[numthreads(8,1,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //cull the threads outside the buffer
    if (id.x >= buffer_size.x || id.y >= 1 || id.z >= buffer_size.z)
        return;

    //Voxel space column position
    int3 column_position;
    column_position.x = (int)id.x + world_position.x * buffer_size.x;
    column_position.z = (int)id.z + world_position.z * buffer_size.z;

    
    float smooth_terrain;
    Unity_GradientNoise_float(column_position.xz, 0.02f, smooth_terrain);
    smooth_terrain = smooth_terrain * 0.2f + 0.1f;
    
    float hilly_terrain;
    Unity_GradientNoise_float(column_position.xz, 0.1f, hilly_terrain);
    hilly_terrain = hilly_terrain * 0.8f + 0.1f;

    float terrain_mix;
    Unity_GradientNoise_float(column_position.xz, 0.007f, terrain_mix);
    terrain_mix = clamp(terrain_mix * 2.0f - 1.0f, 0.0f, 1.0f);
    
    float final_terrain = lerp(smooth_terrain, hilly_terrain, terrain_mix);

    final_terrain *= buffer_size.y;    
    for (int y = 0; y < buffer_size.y; y++)
    {
        y += world_position.y * buffer_size.y;
        voxel_buffer[get_buffer_pos(id.x, y, id.z)] = (y < final_terrain) + (y < final_terrain - 1);
    }
}
